/*
 *
 * Copyright 2019-2021 Signal Messenger, LLC
 * SPDX-License-Identifier: AGPL-3.0-only
 *
 */

#ifndef CBINDGEN_BINDINGS_H
#define CBINDGEN_BINDINGS_H

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

#define MINIMUM_BITRATE_BPS 30000

#define MAXIMUM_BITRATE_BPS 2000001

#define MAC_SIZE_BYTES 16

typedef enum LogSeverity {
    Verbose,
    Info,
    Warn,
    Error,
    None,
} LogSeverity;

/**
 * Rust version of WebRTC AdapterType
 */
typedef enum NetworkInterfaceType {
    Unknown = 0,
    Ethernet = 1,
    Wifi = (1 << 1),
    Cellular = (1 << 2),
    Vpn = (1 << 3),
    Loopback = (1 << 4),
    Any = (1 << 5),
} NetworkInterfaceType;

typedef enum RffiVideoCodecType {
    Vp8 = 8,
    Vp9 = 9,
    H264ConstrainedHigh = 46,
    H264ConstrainedBaseline = 40,
} RffiVideoCodecType;

typedef enum SrtpCryptoSuite {
    Aes128CmSha1 = 1,
    AeadAes128Gcm = 7,
    AeadAes256Gcm = 8,
} SrtpCryptoSuite;

typedef enum VideoRotation {
    VideoRotation_None = 0,
    VideoRotation_Clockwise90 = 90,
    VideoRotation_Clockwise180 = 180,
    VideoRotation_Clockwise270 = 270,
} VideoRotation;

/**
 * Represents a device connecting to an SFU and joining a group call.
 */
typedef struct Client Client;

#if defined(TARGET_OS_IOS)
/**
 * Swift String
 */
typedef struct rtc_String {
    const uint8_t *ptr;
    size_t count;
} rtc_String;
#endif

#if defined(TARGET_OS_IOS)
typedef struct rtc_http_Header {
    struct rtc_String name;
    struct rtc_String value;
} rtc_http_Header;
#endif

#if defined(TARGET_OS_IOS)
typedef struct rtc_http_Headers {
    const struct rtc_http_Header *ptr;
    size_t count;
} rtc_http_Headers;
#endif

#if defined(TARGET_OS_IOS)
/**
 * Swift Data/[UInt8]/UnsafeBufferPointer<UInt8>
 */
typedef struct rtc_Bytes {
    const uint8_t *ptr;
    size_t count;
} rtc_Bytes;
#endif

#if defined(TARGET_OS_IOS)
typedef struct rtc_http_Request {
    struct rtc_String url;
    int32_t method;
    struct rtc_http_Headers headers;
    struct rtc_Bytes body;
} rtc_http_Request;
#endif

#if defined(TARGET_OS_IOS)
typedef struct rtc_http_Delegate {
    void *retained;
    void (*release)(void *retained);
    void (*send_request)(const void *unretained, uint32_t request_id, struct rtc_http_Request request);
} rtc_http_Delegate;
#endif

#if defined(TARGET_OS_IOS)
typedef struct rtc_http_Response {
    uint16_t status_code;
    struct rtc_Bytes body;
} rtc_http_Response;
#endif

#if defined(TARGET_OS_IOS)
/**
 * Swift "UInt32?"
 */
typedef struct rtc_OptionalU32 {
    uint32_t value;
    bool valid;
} rtc_OptionalU32;
#endif

#if defined(TARGET_OS_IOS)
typedef struct rtc_log_Record {
    struct rtc_String message;
    struct rtc_String file;
    struct rtc_String function;
    struct rtc_OptionalU32 line;
    uint8_t level;
} rtc_log_Record;
#endif

#if defined(TARGET_OS_IOS)
typedef struct rtc_log_Delegate {
    void (*log)(struct rtc_log_Record record);
} rtc_log_Delegate;
#endif

#if defined(TARGET_OS_IOS)
typedef struct rtc_sfu_GroupMember {
    struct rtc_Bytes user_id;
    struct rtc_Bytes member_id;
} rtc_sfu_GroupMember;
#endif

#if defined(TARGET_OS_IOS)
typedef struct rtc_sfu_GroupMembers {
    const struct rtc_sfu_GroupMember *ptr;
    size_t count;
} rtc_sfu_GroupMembers;
#endif

#if defined(TARGET_OS_IOS)
typedef struct rtc_sfu_PeekRequest {
    struct rtc_String sfu_url;
    struct rtc_Bytes membership_proof;
    struct rtc_sfu_GroupMembers group_members;
} rtc_sfu_PeekRequest;
#endif

#if defined(TARGET_OS_IOS)
typedef struct rtc_OptionalU16 {
    uint16_t value;
    bool valid;
} rtc_OptionalU16;
#endif

#if defined(TARGET_OS_IOS)
typedef struct rtc_UserIds {
    const struct rtc_Bytes *ptr;
    size_t count;
} rtc_UserIds;
#endif

#if defined(TARGET_OS_IOS)
typedef struct rtc_sfu_PeekInfo {
    struct rtc_Bytes creator;
    struct rtc_String era_id;
    struct rtc_OptionalU32 max_devices;
    uint32_t device_count;
    struct rtc_UserIds joined_members;
} rtc_sfu_PeekInfo;
#endif

#if defined(TARGET_OS_IOS)
typedef struct rtc_sfu_PeekResponse {
    struct rtc_OptionalU16 error_status_code;
    struct rtc_sfu_PeekInfo peek_info;
} rtc_sfu_PeekResponse;
#endif

#if defined(TARGET_OS_IOS)
typedef struct rtc_sfu_Delegate {
    void *retained;
    void (*release)(void *retained);
    void (*handle_peek_response)(const void *unretained, uint32_t request_id, struct rtc_sfu_PeekResponse peek_response);
} rtc_sfu_Delegate;
#endif

#if defined(TARGET_OS_ANDROID)
/**
 * Incomplete type for C++ JavaMediaStream.
 */
typedef struct RffiJavaMediaStream {
    uint8_t _private[0];
} RffiJavaMediaStream;
#endif

typedef const struct RffiJavaMediaStream *Owned_RffiJavaMediaStream;

/**
 * Incomplete type for WebRTC C++ MediaStream.
 */
typedef struct RffiMediaStream {
    uint8_t _private[0];
} RffiMediaStream;

typedef const struct RffiMediaStream *OwnedRc_RffiMediaStream;

typedef const struct RffiJavaMediaStream *Borrowed_RffiJavaMediaStream;

/**
 * Incomplete type for C++ PeerConnection.
 */
typedef struct RffiPeerConnection {
    uint8_t _private[0];
} RffiPeerConnection;

typedef const struct RffiPeerConnection *BorrowedRc_RffiPeerConnection;

#if defined(TARGET_OS_IOS)
/**
 * Structure for passing buffers (strings/bytes) to/from Swift.
 */
typedef struct AppByteSlice {
    const uint8_t *bytes;
    size_t len;
} AppByteSlice;
#endif

#if defined(TARGET_OS_IOS)
/**
 * Structure for passing multiple Ice Candidates to/from Swift.
 */
typedef struct AppIceCandidateArray {
    const struct AppByteSlice *candidates;
    size_t count;
} AppIceCandidateArray;
#endif

#if defined(TARGET_OS_IOS)
/**
 * Structure for passing connection details from the application.
 */
typedef struct AppConnectionInterface {
    void *object;
    void *pc;
    /**
     * Swift object clean up method.
     */
    void (*destroy)(void *object);
} AppConnectionInterface;
#endif

#if defined(TARGET_OS_IOS)
/**
 * Structure for passing media stream instances from the application.
 */
typedef struct AppMediaStreamInterface {
    void *object;
    /**
     * Swift object clean up method.
     */
    void (*destroy)(void *object);
    /**
     * Returns a pointer to a RTCMediaStream object.
     */
    void *(*createMediaStream)(void *object, void *nativeStream);
} AppMediaStreamInterface;
#endif

typedef uint32_t ClientId;

typedef uint32_t DemuxId;

typedef uint16_t RffiAudioLevel;

typedef RffiAudioLevel AudioLevel;

#if defined(TARGET_OS_IOS)
typedef struct AppReceivedAudioLevel {
    DemuxId demuxId;
    AudioLevel level;
} AppReceivedAudioLevel;
#endif

#if defined(TARGET_OS_IOS)
typedef struct AppReceivedAudioLevelArray {
    const struct AppReceivedAudioLevel *levels;
    size_t count;
} AppReceivedAudioLevelArray;
#endif

#if defined(TARGET_OS_IOS)
/**
 * Structure for passing optional bool values to/from Swift.
 */
typedef struct AppOptionalBool {
    bool value;
    bool valid;
} AppOptionalBool;
#endif

#if defined(TARGET_OS_IOS)
typedef struct AppRemoteDeviceState {
    DemuxId demuxId;
    struct AppByteSlice user_id;
    bool mediaKeysReceived;
    struct AppOptionalBool audioMuted;
    struct AppOptionalBool videoMuted;
    struct AppOptionalBool presenting;
    struct AppOptionalBool sharingScreen;
    uint64_t addedTime;
    uint64_t speakerTime;
    struct AppOptionalBool forwardingVideo;
    bool isHigherResolutionPending;
} AppRemoteDeviceState;
#endif

#if defined(TARGET_OS_IOS)
typedef struct AppRemoteDeviceStateArray {
    const struct AppRemoteDeviceState *states;
    size_t count;
} AppRemoteDeviceStateArray;
#endif

#if defined(TARGET_OS_IOS)
typedef struct AppUuidArray {
    const struct AppByteSlice *uuids;
    size_t count;
} AppUuidArray;
#endif

#if defined(TARGET_OS_IOS)
/**
 * Structure for passing optional u32 values to/from Swift.
 */
typedef struct AppOptionalUInt32 {
    uint32_t value;
    bool valid;
} AppOptionalUInt32;
#endif

#if defined(TARGET_OS_IOS)
/**
 * iOS Interface for communicating with the Swift application.
 */
typedef struct AppInterface {
    /**
     * Raw Swift object pointer.
     */
    void *object;
    /**
     * Swift object clean up method.
     */
    void (*destroy)(void *object);
    /**
     *
     */
    void (*onStartCall)(void *object, const void *remote, uint64_t callId, bool isOutgoing, int32_t callMediaType);
    /**
     * Swift event callback method.
     */
    void (*onEvent)(void *object, const void *remote, int32_t event);
    /**
     *
     */
    void (*onNetworkRouteChanged)(void *object, const void *remote, int32_t localNetworkAdapterType);
    /**
     *
     */
    void (*onAudioLevels)(void *object, const void *remote, uint16_t capturedLevel, uint16_t receivedLevel);
    /**
     *
     */
    void (*onSendOffer)(void *object, uint64_t callId, const void *remote, uint32_t destinationDeviceId, bool broadcast, struct AppByteSlice opaque, int32_t callMediaType);
    /**
     *
     */
    void (*onSendAnswer)(void *object, uint64_t callId, const void *remote, uint32_t destinationDeviceId, bool broadcast, struct AppByteSlice opaque);
    /**
     *
     */
    void (*onSendIceCandidates)(void *object, uint64_t callId, const void *remote, uint32_t destinationDeviceId, bool broadcast, const struct AppIceCandidateArray *candidates);
    /**
     *
     */
    void (*onSendHangup)(void *object, uint64_t callId, const void *remote, uint32_t destinationDeviceId, bool broadcast, int32_t hangupType, uint32_t deviceId);
    /**
     *
     */
    void (*onSendBusy)(void *object, uint64_t callId, const void *remote, uint32_t destinationDeviceId, bool broadcast);
    /**
     *
     */
    void (*sendCallMessage)(void *object, struct AppByteSlice recipientUuid, struct AppByteSlice message, int32_t urgency);
    /**
     *
     */
    void (*sendCallMessageToGroup)(void *object, struct AppByteSlice groupId, struct AppByteSlice message, int32_t urgency);
    struct AppConnectionInterface (*onCreateConnectionInterface)(void *object, void *observer, uint32_t deviceId, void *context);
    /**
     * Request that the application create an application Media Stream object
     * associated with the given application Connection object.
     */
    struct AppMediaStreamInterface (*onCreateMediaStreamInterface)(void *object, void *connection);
    /**
     *
     */
    void (*onConnectMedia)(void *object, const void *remote, void *context, const void *stream);
    /**
     *
     */
    bool (*onCompareRemotes)(void *object, const void *remote1, const void *remote2);
    /**
     *
     */
    void (*onCallConcluded)(void *object, const void *remote);
    /**
     *
     */
    void (*groupCallRingUpdate)(void *object, struct AppByteSlice groupId, int64_t ringId, struct AppByteSlice senderUuid, int32_t ringUpdate);
    /**
     *
     */
    void (*requestMembershipProof)(void *object, ClientId clientId);
    /**
     *
     */
    void (*requestGroupMembers)(void *object, ClientId clientId);
    /**
     *
     */
    void (*handleConnectionStateChanged)(void *object, ClientId clientId, int32_t connectionState);
    void (*handleNetworkRouteChanged)(void *object, ClientId clientId, int32_t localNetworkAdapterType);
    void (*handleAudioLevels)(void *object, ClientId clientId, uint16_t capturedLevel, struct AppReceivedAudioLevelArray receivedAudioLevels);
    /**
     *
     */
    void (*handleJoinStateChanged)(void *object, ClientId clientId, int32_t joinState);
    /**
     *
     */
    void (*handleRemoteDevicesChanged)(void *object, ClientId clientId, struct AppRemoteDeviceStateArray remoteDeviceStates);
    /**
     *
     */
    void (*handleIncomingVideoTrack)(void *object, ClientId clientId, DemuxId remoteDemuxId, void *nativeVideoTrack);
    /**
     *
     */
    void (*handlePeekChanged)(void *object, ClientId clientId, struct AppUuidArray joinedMembers, struct AppByteSlice creator, struct AppByteSlice eraId, struct AppOptionalUInt32 maxDevices, uint32_t deviceCount);
    /**
     *
     */
    void (*handleEnded)(void *object, ClientId clientId, int32_t reason);
} AppInterface;
#endif

#if defined(TARGET_OS_IOS)
/**
 * Structure for holding call context details on behalf of the application.
 */
typedef struct AppCallContext {
    void *object;
    /**
     * Swift object clean up method.
     */
    void (*destroy)(void *object);
} AppCallContext;
#endif

#if defined(TARGET_OS_IOS)
/**
 * Structure for passing optional u16 values to/from Swift.
 */
typedef struct AppOptionalUInt16 {
    uint16_t value;
    bool valid;
} AppOptionalUInt16;
#endif

#if defined(TARGET_OS_IOS)
typedef struct AppVideoRequest {
    DemuxId demux_id;
    uint16_t width;
    uint16_t height;
    struct AppOptionalUInt16 framerate;
} AppVideoRequest;
#endif

#if defined(TARGET_OS_IOS)
typedef struct AppVideoRequestArray {
    const struct AppVideoRequest *resolutions;
    size_t count;
} AppVideoRequestArray;
#endif

#if defined(TARGET_OS_IOS)
typedef struct AppGroupMemberInfo {
    struct AppByteSlice userId;
    struct AppByteSlice memberId;
} AppGroupMemberInfo;
#endif

#if defined(TARGET_OS_IOS)
typedef struct AppGroupMemberInfoArray {
    const struct AppGroupMemberInfo *members;
    size_t count;
} AppGroupMemberInfoArray;
#endif

/**
 * Rust version of WebRTC RFFI InjectableNetwork
 */
typedef struct RffiInjectableNetwork {
    uint8_t _private[0];
} RffiInjectableNetwork;

typedef const struct RffiInjectableNetwork *Borrowed_RffiInjectableNetwork;

typedef const void *Borrowed_c_void;

typedef const char *Borrowed_c_char;

/**
 * Rust version of Web RFFI Ip,
 * which is like WebRTC IPAddress.
 */
typedef struct RffiIp {
    bool v6;
    uint8_t address[16];
} RffiIp;

/**
 * Rust version of WebRTC RFFI IpPort,
 * which is like WebRTC SocketAddress
 */
typedef struct RffiIpPort {
    struct RffiIp ip;
    uint16_t port;
} RffiIpPort;

typedef const uint8_t *Borrowed_u8;

typedef struct LoggerCallbacks {
    void (*onLogMessage)(enum LogSeverity, Borrowed_c_char);
} LoggerCallbacks;

typedef const struct LoggerCallbacks *Borrowed_LoggerCallbacks;

/**
 * Incomplete type for C++ VideoTrack.
 */
typedef struct RffiVideoTrack {
    uint8_t _private[0];
} RffiVideoTrack;

typedef const struct RffiVideoTrack *BorrowedRc_RffiVideoTrack;

/**
 * Incomplete type for C++ AudioTrack.
 */
typedef struct RffiAudioTrack {
    uint8_t _private[0];
} RffiAudioTrack;

typedef const struct RffiAudioTrack *BorrowedRc_RffiAudioTrack;

/**
 * Incomplete type for C++ VideoSource.
 */
typedef struct RffiVideoSource {
    uint8_t _private[0];
} RffiVideoSource;

typedef const struct RffiVideoSource *BorrowedRc_RffiVideoSource;

/**
 * Incomplete type for C++ webrtc::VideoFrameBuffer.
 */
typedef struct RffiVideoFrameBuffer {
    uint8_t _private[0];
} RffiVideoFrameBuffer;

typedef const struct RffiVideoFrameBuffer *BorrowedRc_RffiVideoFrameBuffer;

typedef const struct RffiVideoFrameBuffer *OwnedRc_RffiVideoFrameBuffer;

/**
 * Incomplete type for C++ webrtc::rffi::CreateSessionDescriptionObserverRffi
 */
typedef struct RffiCreateSessionDescriptionObserver {
    uint8_t _private[0];
} RffiCreateSessionDescriptionObserver;

typedef const struct RffiCreateSessionDescriptionObserver *BorrowedRc_RffiCreateSessionDescriptionObserver;

/**
 * Incomplete type for C++ CreateSessionDescriptionObserverRffi
 */
typedef struct RffiSetSessionDescriptionObserver {
    uint8_t _private[0];
} RffiSetSessionDescriptionObserver;

typedef const struct RffiSetSessionDescriptionObserver *BorrowedRc_RffiSetSessionDescriptionObserver;

/**
 * Incomplete type for SessionDescription, used by
 * CreateSessionDescriptionObserver callbacks.
 */
typedef struct RffiSessionDescription {
    uint8_t _private[0];
} RffiSessionDescription;

typedef const struct RffiSessionDescription *Owned_RffiSessionDescription;

typedef const struct RffiIpPort *Borrowed_RffiIpPort;

/**
 * Incomplete type for C++ IceGathererInterface.
 */
typedef struct RffiIceGatherer {
    uint8_t _private[0];
} RffiIceGatherer;

typedef const struct RffiIceGatherer *OwnedRc_RffiIceGatherer;

typedef const struct RffiIceGatherer *BorrowedRc_RffiIceGatherer;

/**
 * Incomplete type for C++ webrtc::rffi::StatsObserverRffi
 */
typedef struct RffiStatsObserver {
    uint8_t _private[0];
} RffiStatsObserver;

typedef const struct RffiStatsObserver *BorrowedRc_RffiStatsObserver;

typedef uint8_t PayloadType;

typedef uint16_t SequenceNumber;

typedef uint32_t Timestamp;

typedef uint32_t Ssrc;

typedef struct RffiAudioEncoderConfig {
    uint32_t packet_size_ms;
    int32_t bandwidth;
    int32_t start_bitrate_bps;
    int32_t min_bitrate_bps;
    int32_t max_bitrate_bps;
    int32_t complexity;
    int32_t enable_vbr;
    int32_t enable_dtx;
    int32_t enable_fec;
} RffiAudioEncoderConfig;

typedef const struct RffiAudioEncoderConfig *Borrowed_RffiAudioEncoderConfig;

typedef const RffiAudioLevel *Borrowed_RffiAudioLevel;

typedef struct RffiReceivedAudioLevel {
    uint32_t demux_id;
    RffiAudioLevel level;
} RffiReceivedAudioLevel;

typedef const struct RffiReceivedAudioLevel *Borrowed_RffiReceivedAudioLevel;

typedef const uintptr_t *Borrowed_usize;

/**
 * Incomplete type for C++ PeerConnectionFactoryOwner.
 */
typedef struct RffiPeerConnectionFactoryOwner {
    uint8_t _private[0];
} RffiPeerConnectionFactoryOwner;

typedef const struct RffiPeerConnectionFactoryOwner *OwnedRc_RffiPeerConnectionFactoryOwner;

/**
 * Incomplete type for C++ PeerConnectionFactoryInterface.
 */
typedef struct RffiPeerConnectionFactoryInterface {
    uint8_t _private[0];
} RffiPeerConnectionFactoryInterface;

typedef const struct RffiPeerConnectionFactoryInterface *BorrowedRc_RffiPeerConnectionFactoryInterface;

typedef const struct RffiPeerConnectionFactoryOwner *BorrowedRc_RffiPeerConnectionFactoryOwner;

typedef const struct RffiPeerConnection *OwnedRc_RffiPeerConnection;

/**
 * Incomplete type for C++ PeerConnectionObserver.
 */
typedef struct RffiPeerConnectionObserver {
    uint8_t _private[0];
} RffiPeerConnectionObserver;

typedef const struct RffiPeerConnectionObserver *Borrowed_RffiPeerConnectionObserver;

typedef const Borrowed_c_char *Borrowed_Borrowed_c_char;

typedef struct RffiIceServer {
    Borrowed_c_char username;
    Borrowed_c_char password;
    Borrowed_Borrowed_c_char urls;
    uintptr_t urls_size;
} RffiIceServer;

typedef const struct RffiAudioTrack *OwnedRc_RffiAudioTrack;

typedef const struct RffiVideoSource *OwnedRc_RffiVideoSource;

typedef const struct RffiVideoTrack *OwnedRc_RffiVideoTrack;

typedef const struct RffiPeerConnectionObserver *Owned_RffiPeerConnectionObserver;

typedef struct RffiRefCounted {
    uint8_t _private[0];
} RffiRefCounted;

typedef const struct RffiRefCounted *OwnedRc_RffiRefCounted;

typedef const struct RffiRefCounted *BorrowedRc_RffiRefCounted;

typedef const struct RffiSetSessionDescriptionObserver *OwnedRc_RffiSetSessionDescriptionObserver;

typedef const struct RffiCreateSessionDescriptionObserver *OwnedRc_RffiCreateSessionDescriptionObserver;

typedef const char *Owned_c_char;

typedef const struct RffiSessionDescription *Borrowed_RffiSessionDescription;

typedef struct RffiVideoCodec {
    enum RffiVideoCodecType type;
    uint32_t level;
} RffiVideoCodec;

typedef const struct RffiVideoCodec *Borrowed_RffiVideoCodec;

typedef struct RffiConnectionParametersV4 {
    Borrowed_c_char ice_ufrag;
    Borrowed_c_char ice_pwd;
    Borrowed_RffiVideoCodec receive_video_codecs;
    uintptr_t receive_video_codecs_size;
} RffiConnectionParametersV4;

typedef const struct RffiConnectionParametersV4 *Owned_RffiConnectionParametersV4;

typedef const struct RffiConnectionParametersV4 *Borrowed_RffiConnectionParametersV4;

/**
 * For passing into C++
 */
typedef struct RffiSrtpKey {
    enum SrtpCryptoSuite suite;
    Borrowed_u8 key_data;
    size_t key_len;
    Borrowed_u8 salt_data;
    size_t salt_len;
} RffiSrtpKey;

typedef const uint32_t *Borrowed_u32;

typedef const struct RffiStatsObserver *OwnedRc_RffiStatsObserver;

#define RTP_DATA_PAYLOAD_TYPE 101

#define OLD_RTP_DATA_SSRC_FOR_OUTGOING 1001

#define OLD_RTP_DATA_SSRC_FOR_INCOMING 2001

#define NEW_RTP_DATA_SSRC 13

#define INVALID_CLIENT_ID 0

#if defined(TARGET_OS_IOS)
Client *rtc_http_Client_create(struct rtc_http_Delegate delegate);
#endif

#if defined(TARGET_OS_IOS)
/**
 * # Safety
 *
 * client_ptr must come from rtc_http_Client_create and not already be destroyed
 */
void rtc_http_Client_destroy(Client *client_ptr);
#endif

#if defined(TARGET_OS_IOS)
/**
 * # Safety
 *
 * client_ptr must come from rtc_http_Client_create and not already be destroyed
 */
void rtc_http_Client_received_response(const Client *client,
                                       uint32_t request_id,
                                       struct rtc_http_Response response);
#endif

#if defined(TARGET_OS_IOS)
/**
 * # Safety
 *
 * client_ptr must come from rtc_http_Client_create and not already be destroyed
 */
void rtc_http_Client_request_failed(const Client *client, uint32_t request_id);
#endif

#if defined(TARGET_OS_IOS)
void rtc_log_init(struct rtc_log_Delegate delegate, uint8_t max_level);
#endif

#if defined(TARGET_OS_IOS)
/**
 * # Safety
 *
 * http_client_ptr must come from rtc_http_Client_create and not already be destroyed
 */
void rtc_sfu_peek(const Client *http_client,
                  uint32_t request_id,
                  struct rtc_sfu_PeekRequest request,
                  struct rtc_sfu_Delegate delegate);
#endif

#if defined(TARGET_OS_ANDROID)
jobject Java_org_signal_ringrtc_CallManager_ringrtcGetBuildInfo(JNIEnv env, JClass _class);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_CallManager_ringrtcInitialize(JNIEnv env, JClass _class);
#endif

#if defined(TARGET_OS_ANDROID)
jlong Java_org_signal_ringrtc_CallManager_ringrtcCreateCallManager(JNIEnv env,
                                                                   JClass _class,
                                                                   JObject jni_call_manager);
#endif

#if defined(TARGET_OS_ANDROID)
jlong Java_org_signal_ringrtc_CallManager_ringrtcCreatePeerConnection(JNIEnv env,
                                                                      JObject _object,
                                                                      jlong peer_connection_factory,
                                                                      jlong native_connection_borrowed,
                                                                      JObject jni_rtc_config,
                                                                      JObject jni_media_constraints);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_CallManager_ringrtcSetSelfUuid(JNIEnv env,
                                                            JObject _object,
                                                            jlong call_manager,
                                                            jbyteArray uuid);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_CallManager_ringrtcCall(JNIEnv env,
                                                     JObject _object,
                                                     jlong call_manager,
                                                     JObject jni_remote,
                                                     jint call_media_type,
                                                     jint local_device);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_CallManager_ringrtcProceed(JNIEnv env,
                                                        JObject _object,
                                                        jlong call_manager,
                                                        jlong call_id,
                                                        JObject jni_call_context,
                                                        jint bandwidth_mode,
                                                        jint audio_levels_interval_millis);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_CallManager_ringrtcMessageSent(JNIEnv env,
                                                            JObject _object,
                                                            jlong call_manager,
                                                            jlong call_id);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_CallManager_ringrtcMessageSendFailure(JNIEnv env,
                                                                   JObject _object,
                                                                   jlong call_manager,
                                                                   jlong call_id);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_CallManager_ringrtcHangup(JNIEnv env,
                                                       JObject _object,
                                                       jlong call_manager);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_CallManager_ringrtcCancelGroupRing(JNIEnv env,
                                                                JObject _object,
                                                                jlong call_manager,
                                                                jbyteArray group_id,
                                                                jlong ring_id,
                                                                jint reason);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_CallManager_ringrtcReceivedAnswer(JNIEnv env,
                                                               JObject _object,
                                                               jlong call_manager,
                                                               jlong call_id,
                                                               jint remote_device,
                                                               jbyteArray opaque,
                                                               jbyteArray sender_identity_key,
                                                               jbyteArray receiver_identity_key);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_CallManager_ringrtcReceivedOffer(JNIEnv env,
                                                              JObject _object,
                                                              jlong call_manager,
                                                              jlong call_id,
                                                              JObject jni_remote,
                                                              jint remote_device,
                                                              jbyteArray opaque,
                                                              jlong message_age_sec,
                                                              jint call_media_type,
                                                              jint local_device,
                                                              jboolean jni_is_local_device_primary,
                                                              jbyteArray sender_identity_key,
                                                              jbyteArray receiver_identity_key);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_CallManager_ringrtcReceivedIceCandidates(JNIEnv env,
                                                                      JObject _object,
                                                                      jlong call_manager,
                                                                      jlong call_id,
                                                                      jint remote_device,
                                                                      JObject jni_ice_candidates);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_CallManager_ringrtcReceivedHangup(JNIEnv env,
                                                               JObject _object,
                                                               jlong call_manager,
                                                               jlong call_id,
                                                               jint remote_device,
                                                               jint hangup_type,
                                                               jint device_id);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_CallManager_ringrtcReceivedBusy(JNIEnv env,
                                                             JObject _object,
                                                             jlong call_manager,
                                                             jlong call_id,
                                                             jint remote_device);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_CallManager_ringrtcReceivedCallMessage(JNIEnv env,
                                                                    JObject _object,
                                                                    jlong call_manager,
                                                                    jbyteArray sender_uuid,
                                                                    jint sender_device_id,
                                                                    jint local_device_id,
                                                                    jbyteArray message,
                                                                    jlong message_age_sec);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_CallManager_ringrtcReceivedHttpResponse(JNIEnv env,
                                                                     JObject _object,
                                                                     jlong call_manager,
                                                                     jlong request_id,
                                                                     jint status_code,
                                                                     jbyteArray body);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_CallManager_ringrtcHttpRequestFailed(JNIEnv env,
                                                                  JObject _object,
                                                                  jlong call_manager,
                                                                  jlong request_id);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_CallManager_ringrtcAcceptCall(JNIEnv env,
                                                           JObject _object,
                                                           jlong call_manager,
                                                           jlong call_id);
#endif

#if defined(TARGET_OS_ANDROID)
jobject Java_org_signal_ringrtc_CallManager_ringrtcGetActiveConnection(JNIEnv env,
                                                                       JObject _object,
                                                                       jlong call_manager);
#endif

#if defined(TARGET_OS_ANDROID)
jobject Java_org_signal_ringrtc_CallManager_ringrtcGetActiveCallContext(JNIEnv env,
                                                                        JObject _object,
                                                                        jlong call_manager);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_CallManager_ringrtcSetVideoEnable(JNIEnv env,
                                                               JObject _object,
                                                               jlong call_manager,
                                                               jboolean enable);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_CallManager_ringrtcUpdateBandwidthMode(JNIEnv env,
                                                                    JObject _object,
                                                                    jlong call_manager,
                                                                    jint bandwidth_mode);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_CallManager_ringrtcDrop(JNIEnv env,
                                                     JObject _object,
                                                     jlong call_manager,
                                                     jlong call_id);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_CallManager_ringrtcReset(JNIEnv env,
                                                      JObject _object,
                                                      jlong call_manager);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_CallManager_ringrtcClose(JNIEnv env,
                                                      JObject _object,
                                                      jlong call_manager);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_CallManager_ringrtcPeekGroupCall(JNIEnv env,
                                                              JObject _object,
                                                              jlong call_manager,
                                                              jlong request_id,
                                                              JString sfu_url,
                                                              jbyteArray membership_proof,
                                                              jbyteArray jni_serialized_group_members);
#endif

#if defined(TARGET_OS_ANDROID)
jlong Java_org_signal_ringrtc_GroupCall_ringrtcCreateGroupCallClient(JNIEnv env,
                                                                     JObject _object,
                                                                     jlong call_manager,
                                                                     jbyteArray group_id,
                                                                     JString sfu_url,
                                                                     jbyteArray hkdf_extra_info,
                                                                     jint audio_levels_interval_millis,
                                                                     jlong native_peer_connection_factory_borrowed_rc,
                                                                     jlong native_audio_track_borrowed_rc,
                                                                     jlong native_video_track_borrowed_rc);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_GroupCall_ringrtcDeleteGroupCallClient(JNIEnv env,
                                                                    JObject _object,
                                                                    jlong call_manager,
                                                                    jlong client_id);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_GroupCall_ringrtcConnect(JNIEnv env,
                                                      JObject _object,
                                                      jlong call_manager,
                                                      jlong client_id);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_GroupCall_ringrtcJoin(JNIEnv env,
                                                   JObject _object,
                                                   jlong call_manager,
                                                   jlong client_id);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_GroupCall_ringrtcLeave(JNIEnv env,
                                                    JObject _object,
                                                    jlong call_manager,
                                                    jlong client_id);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_GroupCall_ringrtcDisconnect(JNIEnv env,
                                                         JObject _object,
                                                         jlong call_manager,
                                                         jlong client_id);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_GroupCall_ringrtcSetOutgoingAudioMuted(JNIEnv env,
                                                                    JObject _object,
                                                                    jlong call_manager,
                                                                    jlong client_id,
                                                                    bool muted);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_GroupCall_ringrtcSetOutgoingVideoMuted(JNIEnv env,
                                                                    JObject _object,
                                                                    jlong call_manager,
                                                                    jlong client_id,
                                                                    bool muted);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_GroupCall_ringrtcRing(JNIEnv env,
                                                   JObject _object,
                                                   jlong call_manager,
                                                   jlong client_id,
                                                   jbyteArray recipient);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_GroupCall_ringrtcResendMediaKeys(JNIEnv env,
                                                              JObject _object,
                                                              jlong call_manager,
                                                              jlong client_id);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_GroupCall_ringrtcSetBandwidthMode(JNIEnv env,
                                                               JObject _object,
                                                               jlong call_manager,
                                                               jlong client_id,
                                                               jint bandwidth_mode);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_GroupCall_ringrtcRequestVideo(JNIEnv env,
                                                           JObject _object,
                                                           jlong call_manager,
                                                           jlong client_id,
                                                           JObject jni_rendered_resolutions,
                                                           jint active_speaker_height);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_GroupCall_ringrtcSetGroupMembers(JNIEnv env,
                                                              JObject _object,
                                                              jlong call_manager,
                                                              jlong client_id,
                                                              jbyteArray jni_serialized_group_members);
#endif

#if defined(TARGET_OS_ANDROID)
void Java_org_signal_ringrtc_GroupCall_ringrtcSetMembershipProof(JNIEnv env,
                                                                 JObject _object,
                                                                 jlong call_manager,
                                                                 jlong client_id,
                                                                 jbyteArray proof);
#endif

#if defined(TARGET_OS_ANDROID)
extern Owned_RffiJavaMediaStream Rust_createJavaMediaStream(OwnedRc_RffiMediaStream rffi_media_stream);
#endif

#if defined(TARGET_OS_ANDROID)
extern void Rust_deleteJavaMediaStream(Owned_RffiJavaMediaStream rffi_java_media_stream);
#endif

#if defined(TARGET_OS_ANDROID)
extern jobject Rust_getJavaMediaStreamObject(Borrowed_RffiJavaMediaStream rffi_java_media_stream);
#endif

#if defined(TARGET_OS_ANDROID)
/**
 * Export the nativeCreatepeerconnection() call from the
 * org.webrtc.PeerConnectionFactory class.
 */
extern jlong Java_org_webrtc_PeerConnectionFactory_nativeCreatePeerConnection(JNIEnv env,
                                                                              JClass class_,
                                                                              jlong factory,
                                                                              JObject rtcConfig,
                                                                              JObject constraints,
                                                                              jlong nativeObserver,
                                                                              JObject sslCertificateVerifier);
#endif

#if defined(TARGET_OS_ANDROID)
extern BorrowedRc_RffiPeerConnection Rust_borrowPeerConnectionFromJniOwnedPeerConnection(int64_t jni_owned_pc);
#endif

#if defined(TARGET_OS_IOS)
void *ringrtcCreateCallManager(struct AppInterface appInterface, const Client *httpClient);
#endif

#if defined(TARGET_OS_IOS)
void *ringrtcSetSelfUuid(void *callManager, struct AppByteSlice uuid);
#endif

#if defined(TARGET_OS_IOS)
void *ringrtcCall(void *callManager,
                  const void *appRemote,
                  int32_t callMediaType,
                  uint32_t appLocalDevice);
#endif

#if defined(TARGET_OS_IOS)
void *ringrtcProceed(void *callManager,
                     uint64_t callId,
                     struct AppCallContext appCallContext,
                     int32_t bandwidthMode,
                     uint64_t audioLevelsIntervalMillis);
#endif

#if defined(TARGET_OS_IOS)
void *ringrtcMessageSent(void *callManager, uint64_t callId);
#endif

#if defined(TARGET_OS_IOS)
void *ringrtcMessageSendFailure(void *callManager, uint64_t callId);
#endif

#if defined(TARGET_OS_IOS)
void *ringrtcHangup(void *callManager);
#endif

#if defined(TARGET_OS_IOS)
void *ringrtcCancelGroupRing(void *callManager,
                             struct AppByteSlice groupId,
                             int64_t ringId,
                             int32_t reason);
#endif

#if defined(TARGET_OS_IOS)
void *ringrtcReceivedAnswer(void *callManager,
                            uint64_t callId,
                            uint32_t senderDeviceId,
                            struct AppByteSlice opaque,
                            struct AppByteSlice senderIdentityKey,
                            struct AppByteSlice receiverIdentityKey);
#endif

#if defined(TARGET_OS_IOS)
void *ringrtcReceivedOffer(void *callManager,
                           uint64_t callId,
                           const void *remotePeer,
                           uint32_t senderDeviceId,
                           struct AppByteSlice opaque,
                           uint64_t messageAgeSec,
                           int32_t callMediaType,
                           uint32_t receiverDeviceId,
                           bool receiverDeviceIsPrimary,
                           struct AppByteSlice senderIdentityKey,
                           struct AppByteSlice receiverIdentityKey);
#endif

#if defined(TARGET_OS_IOS)
void *ringrtcReceivedIceCandidates(void *callManager,
                                   uint64_t callId,
                                   uint32_t senderDeviceId,
                                   const struct AppIceCandidateArray *appIceCandidateArray);
#endif

#if defined(TARGET_OS_IOS)
void *ringrtcReceivedHangup(void *callManager,
                            uint64_t callId,
                            uint32_t remoteDevice,
                            int32_t hangupType,
                            uint32_t deviceId);
#endif

#if defined(TARGET_OS_IOS)
void *ringrtcReceivedBusy(void *callManager, uint64_t callId, uint32_t remoteDevice);
#endif

#if defined(TARGET_OS_IOS)
void ringrtcReceivedCallMessage(void *callManager,
                                struct AppByteSlice senderUuid,
                                uint32_t senderDeviceId,
                                uint32_t localDeviceId,
                                struct AppByteSlice message,
                                uint64_t messageAgeSec);
#endif

#if defined(TARGET_OS_IOS)
void *ringrtcAccept(void *callManager, uint64_t callId);
#endif

#if defined(TARGET_OS_IOS)
void *ringrtcGetActiveConnection(void *callManager);
#endif

#if defined(TARGET_OS_IOS)
void *ringrtcGetActiveCallContext(void *callManager);
#endif

#if defined(TARGET_OS_IOS)
void *ringrtcSetVideoEnable(void *callManager, bool enable);
#endif

#if defined(TARGET_OS_IOS)
void ringrtcUpdateBandwidthMode(void *callManager, int32_t bandwidthMode);
#endif

#if defined(TARGET_OS_IOS)
void *ringrtcDrop(void *callManager, uint64_t callId);
#endif

#if defined(TARGET_OS_IOS)
void *ringrtcReset(void *callManager);
#endif

#if defined(TARGET_OS_IOS)
void *ringrtcClose(void *callManager);
#endif

#if defined(TARGET_OS_IOS)
ClientId ringrtcCreateGroupCallClient(void *callManager,
                                      struct AppByteSlice groupId,
                                      struct AppByteSlice sfuUrl,
                                      struct AppByteSlice hkdfExtraInfo,
                                      uint64_t audio_levels_interval_millis,
                                      const void *nativePeerConnectionFactoryOwnedRc,
                                      const void *nativeAudioTrackOwnedRc,
                                      const void *nativeVideoTrackOwnedRc);
#endif

#if defined(TARGET_OS_IOS)
void ringrtcDeleteGroupCallClient(void *callManager, ClientId clientId);
#endif

#if defined(TARGET_OS_IOS)
void ringrtcConnect(void *callManager, ClientId clientId);
#endif

#if defined(TARGET_OS_IOS)
void ringrtcJoin(void *callManager, ClientId clientId);
#endif

#if defined(TARGET_OS_IOS)
void ringrtcLeave(void *callManager, ClientId clientId);
#endif

#if defined(TARGET_OS_IOS)
void ringrtcDisconnect(void *callManager, ClientId clientId);
#endif

#if defined(TARGET_OS_IOS)
void ringrtcGroupRing(void *callManager, ClientId clientId, struct AppByteSlice recipient);
#endif

#if defined(TARGET_OS_IOS)
void ringrtcSetOutgoingAudioMuted(void *callManager, ClientId clientId, bool muted);
#endif

#if defined(TARGET_OS_IOS)
void ringrtcSetOutgoingVideoMuted(void *callManager, ClientId clientId, bool muted);
#endif

#if defined(TARGET_OS_IOS)
void ringrtcResendMediaKeys(void *callManager, ClientId clientId);
#endif

#if defined(TARGET_OS_IOS)
void ringrtcSetBandwidthMode(void *callManager, ClientId clientId, int32_t bandwidthMode);
#endif

#if defined(TARGET_OS_IOS)
void ringrtcRequestVideo(void *callManager,
                         ClientId clientId,
                         const struct AppVideoRequestArray *appVideoRequestArray,
                         uint16_t activeSpeakerHeight);
#endif

#if defined(TARGET_OS_IOS)
void ringrtcSetGroupMembers(void *callManager,
                            ClientId clientId,
                            const struct AppGroupMemberInfoArray *appGroupMemberInfoArray);
#endif

#if defined(TARGET_OS_IOS)
void ringrtcSetMembershipProof(void *callManager, ClientId clientId, struct AppByteSlice proof);
#endif

#if defined(TARGET_OS_IOS)
bool ringrtcIsValidOffer(struct AppByteSlice opaque, uint64_t messageAgeSec, int32_t callMediaType);
#endif

#if defined(TARGET_OS_IOS)
bool ringrtcIsCallMessageValidOpaqueRing(struct AppByteSlice message,
                                         uint64_t messageAgeSec,
                                         void *callbackContext,
                                         bool (*validateGroupIdAndRing)(struct AppByteSlice, int64_t, void*));
#endif

extern void Rust_InjectableNetwork_SetSender(Borrowed_RffiInjectableNetwork network,
                                             Borrowed_c_void sender);

extern void Rust_InjectableNetwork_AddInterface(Borrowed_RffiInjectableNetwork network,
                                                Borrowed_c_char name,
                                                enum NetworkInterfaceType typ,
                                                struct RffiIp ip,
                                                uint16_t preference);

extern void Rust_InjectableNetwork_RemoveInterface(Borrowed_RffiInjectableNetwork network,
                                                   Borrowed_c_char name);

extern void Rust_InjectableNetwork_ReceiveUdp(Borrowed_RffiInjectableNetwork network,
                                              struct RffiIpPort source,
                                              struct RffiIpPort dest,
                                              Borrowed_u8 data,
                                              uintptr_t size);

extern void Rust_setLogger(Borrowed_LoggerCallbacks callbacks, enum LogSeverity min_severity);

extern uint32_t Rust_getTrackIdAsUint32(BorrowedRc_RffiVideoTrack track);

extern void Rust_setAudioTrackEnabled(BorrowedRc_RffiAudioTrack track, bool enabled);

extern void Rust_setVideoTrackEnabled(BorrowedRc_RffiVideoTrack track, bool enabled);

extern void Rust_setVideoTrackContentHint(BorrowedRc_RffiVideoTrack track, bool is_screenshare);

extern void Rust_pushVideoFrame(BorrowedRc_RffiVideoSource source,
                                BorrowedRc_RffiVideoFrameBuffer buffer);

extern OwnedRc_RffiVideoFrameBuffer Rust_copyVideoFrameBufferFromI420(uint32_t width,
                                                                      uint32_t height,
                                                                      Borrowed_u8 src);

extern OwnedRc_RffiVideoFrameBuffer Rust_copyVideoFrameBufferFromNv12(uint32_t width,
                                                                      uint32_t height,
                                                                      Borrowed_u8 src);

extern OwnedRc_RffiVideoFrameBuffer Rust_copyVideoFrameBufferFromRgba(uint32_t width,
                                                                      uint32_t height,
                                                                      Borrowed_u8 src);

extern void Rust_convertVideoFrameBufferToRgba(BorrowedRc_RffiVideoFrameBuffer buffer,
                                               uint8_t *rgba_out);

extern OwnedRc_RffiVideoFrameBuffer Rust_copyAndRotateVideoFrameBuffer(BorrowedRc_RffiVideoFrameBuffer buffer,
                                                                       enum VideoRotation rotation);

extern void Rust_createOffer(BorrowedRc_RffiPeerConnection peer_connection,
                             BorrowedRc_RffiCreateSessionDescriptionObserver csd_observer);

extern void Rust_setLocalDescription(BorrowedRc_RffiPeerConnection peer_connection,
                                     BorrowedRc_RffiSetSessionDescriptionObserver ssd_observer,
                                     Owned_RffiSessionDescription local_description);

extern void Rust_createAnswer(BorrowedRc_RffiPeerConnection peer_connection,
                              BorrowedRc_RffiCreateSessionDescriptionObserver csd_observer);

extern void Rust_setRemoteDescription(BorrowedRc_RffiPeerConnection peer_connection,
                                      BorrowedRc_RffiSetSessionDescriptionObserver ssd_observer,
                                      Owned_RffiSessionDescription remote_description);

extern void Rust_setOutgoingMediaEnabled(BorrowedRc_RffiPeerConnection peer_connection,
                                         bool enabled);

extern bool Rust_setIncomingMediaEnabled(BorrowedRc_RffiPeerConnection peer_connection,
                                         bool enabled);

extern void Rust_setAudioPlayoutEnabled(BorrowedRc_RffiPeerConnection peer_connection,
                                        bool enabled);

extern void Rust_setAudioRecordingEnabled(BorrowedRc_RffiPeerConnection peer_connection,
                                          bool enabled);

extern bool Rust_addIceCandidateFromSdp(BorrowedRc_RffiPeerConnection peer_connection,
                                        Borrowed_c_char sdp);

extern bool Rust_addIceCandidateFromServer(BorrowedRc_RffiPeerConnection peer_connection,
                                           struct RffiIp ip,
                                           uint16_t port,
                                           bool tcp);

extern bool Rust_removeIceCandidates(BorrowedRc_RffiPeerConnection peer_connection,
                                     Borrowed_RffiIpPort removed_addresses_data,
                                     uintptr_t removed_addresses_len);

extern OwnedRc_RffiIceGatherer Rust_createSharedIceGatherer(BorrowedRc_RffiPeerConnection peer_connection);

extern bool Rust_useSharedIceGatherer(BorrowedRc_RffiPeerConnection peer_connection,
                                      BorrowedRc_RffiIceGatherer ice_gatherer);

extern void Rust_getStats(BorrowedRc_RffiPeerConnection peer_connection,
                          BorrowedRc_RffiStatsObserver stats_observer);

extern void Rust_setSendBitrates(BorrowedRc_RffiPeerConnection peer_connection,
                                 int32_t min_bitrate_bps,
                                 int32_t start_bitrate_bps,
                                 int32_t max_bitrate_bps);

extern bool Rust_sendRtp(BorrowedRc_RffiPeerConnection peer_connection,
                         PayloadType pt,
                         SequenceNumber seqnum,
                         Timestamp timestamp,
                         Ssrc ssrc,
                         Borrowed_u8 payload_data,
                         uintptr_t payload_size);

extern bool Rust_receiveRtp(BorrowedRc_RffiPeerConnection peer_connection, PayloadType pt);

extern void Rust_configureAudioEncoders(BorrowedRc_RffiPeerConnection peer_connection,
                                        Borrowed_RffiAudioEncoderConfig config);

extern void Rust_getAudioLevels(BorrowedRc_RffiPeerConnection peer_connection,
                                Borrowed_RffiAudioLevel captured_out,
                                Borrowed_RffiReceivedAudioLevel received_out,
                                uintptr_t received_out_size,
                                Borrowed_usize received_size_out);

extern void Rust_closePeerConnection(BorrowedRc_RffiPeerConnection peer_connection);

extern OwnedRc_RffiPeerConnectionFactoryOwner Rust_createPeerConnectionFactory(bool use_new_audio_device_module,
                                                                               bool use_injectable_network);

extern OwnedRc_RffiPeerConnectionFactoryOwner Rust_createPeerConnectionFactoryWrapper(BorrowedRc_RffiPeerConnectionFactoryInterface factory);

extern Borrowed_RffiInjectableNetwork Rust_getInjectableNetwork(BorrowedRc_RffiPeerConnectionFactoryOwner factory);

extern OwnedRc_RffiPeerConnection Rust_createPeerConnection(BorrowedRc_RffiPeerConnectionFactoryOwner factory,
                                                            Borrowed_RffiPeerConnectionObserver observer,
                                                            bool hide_ip,
                                                            struct RffiIceServer ice_server,
                                                            BorrowedRc_RffiAudioTrack outgoing_audio_track,
                                                            BorrowedRc_RffiVideoTrack outgoing_video_track);

extern OwnedRc_RffiAudioTrack Rust_createAudioTrack(BorrowedRc_RffiPeerConnectionFactoryOwner factory);

extern OwnedRc_RffiVideoSource Rust_createVideoSource(void);

extern OwnedRc_RffiVideoTrack Rust_createVideoTrack(BorrowedRc_RffiPeerConnectionFactoryOwner factory,
                                                    BorrowedRc_RffiVideoSource source);

extern int16_t Rust_getAudioPlayoutDevices(BorrowedRc_RffiPeerConnectionFactoryOwner factory);

extern int32_t Rust_getAudioPlayoutDeviceName(BorrowedRc_RffiPeerConnectionFactoryOwner factory,
                                              uint16_t index,
                                              char *name_out,
                                              char *uuid_out);

extern bool Rust_setAudioPlayoutDevice(BorrowedRc_RffiPeerConnectionFactoryOwner factory,
                                       uint16_t index);

extern int16_t Rust_getAudioRecordingDevices(BorrowedRc_RffiPeerConnectionFactoryOwner factory);

extern int32_t Rust_getAudioRecordingDeviceName(BorrowedRc_RffiPeerConnectionFactoryOwner factory,
                                                uint16_t index,
                                                char *name_out,
                                                char *uuid_out);

extern bool Rust_setAudioRecordingDevice(BorrowedRc_RffiPeerConnectionFactoryOwner factory,
                                         uint16_t index);

extern Owned_RffiPeerConnectionObserver Rust_createPeerConnectionObserver(Borrowed_c_void pc_observer,
                                                                          Borrowed_c_void pc_observer_cb,
                                                                          bool enable_frame_encryption,
                                                                          bool enable_video_frame_event,
                                                                          bool enable_video_frame_content);

extern void Rust_deletePeerConnectionObserver(Owned_RffiPeerConnectionObserver observer);

extern void Rust_decRc(OwnedRc_RffiRefCounted rc);

extern void Rust_incRc(BorrowedRc_RffiRefCounted rc);

extern OwnedRc_RffiSetSessionDescriptionObserver Rust_createSetSessionDescriptionObserver(Borrowed_c_void ssd_observer,
                                                                                          Borrowed_c_void ssd_observer_cb);

extern OwnedRc_RffiCreateSessionDescriptionObserver Rust_createCreateSessionDescriptionObserver(Borrowed_c_void csd_observer,
                                                                                                Borrowed_c_void csd_observer_cb);

extern Owned_c_char Rust_toSdp(Borrowed_RffiSessionDescription desc);

extern Owned_RffiSessionDescription Rust_answerFromSdp(Borrowed_c_char sdp);

extern Owned_RffiSessionDescription Rust_offerFromSdp(Borrowed_c_char sdp);

extern bool Rust_disableDtlsAndSetSrtpKey(Borrowed_RffiSessionDescription session_description,
                                          enum SrtpCryptoSuite crypto_suite,
                                          Borrowed_u8 key_data,
                                          size_t key_len,
                                          Borrowed_u8 salt_data,
                                          size_t salt_len);

extern Owned_RffiConnectionParametersV4 Rust_sessionDescriptionToV4(Borrowed_RffiSessionDescription v4);

extern void Rust_deleteV4(Owned_RffiConnectionParametersV4 session_description);

extern Owned_RffiSessionDescription Rust_sessionDescriptionFromV4(bool offer,
                                                                  Borrowed_RffiConnectionParametersV4 v4);

extern Owned_RffiSessionDescription Rust_localDescriptionForGroupCall(Borrowed_c_char ice_ufrag,
                                                                      Borrowed_c_char ice_pwd,
                                                                      struct RffiSrtpKey client_srtp_key,
                                                                      uint32_t demux_id);

extern Owned_RffiSessionDescription Rust_remoteDescriptionForGroupCall(Borrowed_c_char ice_ufrag,
                                                                       Borrowed_c_char ice_pwd,
                                                                       struct RffiSrtpKey server_srtp_key,
                                                                       Borrowed_u32 demux_ids_data,
                                                                       size_t demux_ids_len);

extern void Rust_deleteSessionDescription(Owned_RffiSessionDescription sdi);

extern OwnedRc_RffiStatsObserver Rust_createStatsObserver(Borrowed_c_void stats_observer,
                                                          Borrowed_c_void stats_observer_cbs);

#endif /* CBINDGEN_BINDINGS_H */
